// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Answer defines model for Answer.
type Answer struct {
	Answer     string    `json:"answer"`
	AnswerId   string    `json:"answerId"`
	IsPublic   bool      `json:"isPublic"`
	Likes      int       `json:"likes"`
	Question   string    `json:"question"`
	QuestionId string    `json:"questionId"`
	Timestamp  time.Time `json:"timestamp"`
	UserId     string    `json:"userId"`
}

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// Like defines model for Like.
type Like struct {
	AnswerId   string    `json:"answerId"`
	LikeId     string    `json:"likeId"`
	QuestionId string    `json:"questionId"`
	Timestamp  time.Time `json:"timestamp"`
	UserId     string    `json:"userId"`
}

// Question defines model for Question.
type Question struct {
	CreatedByAI bool      `json:"createdByAI"`
	Question    string    `json:"question"`
	QuestionId  string    `json:"questionId"`
	Timestamp   time.Time `json:"timestamp"`
	UserId      string    `json:"userId"`
}

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	UserId string `json:"userId"`
}

// GetAnswersByLikeParams defines parameters for GetAnswersByLike.
type GetAnswersByLikeParams struct {
	Period string `form:"period" json:"period"`
	TopN   int    `form:"topN" json:"topN"`
}

// GetAnswersByQuestionIdParams defines parameters for GetAnswersByQuestionId.
type GetAnswersByQuestionIdParams struct {
	QuestionId string `form:"questionId" json:"questionId"`
}

// GetAnswersByUserIdParams defines parameters for GetAnswersByUserId.
type GetAnswersByUserIdParams struct {
	UserId string `form:"userId" json:"userId"`
}

// GetLikesByUserIdParams defines parameters for GetLikesByUserId.
type GetLikesByUserIdParams struct {
	UserId string `form:"userId" json:"userId"`
}

// GetQuestionsByQuestionIdParams defines parameters for GetQuestionsByQuestionId.
type GetQuestionsByQuestionIdParams struct {
	QuestionId string `form:"questionId" json:"questionId"`
}

// GetQuestionsByUserIdParams defines parameters for GetQuestionsByUserId.
type GetQuestionsByUserIdParams struct {
	UserId string `form:"userId" json:"userId"`
}

// PostAnswerJSONRequestBody defines body for PostAnswer for application/json ContentType.
type PostAnswerJSONRequestBody = Answer

// PostLikeJSONRequestBody defines body for PostLike for application/json ContentType.
type PostLikeJSONRequestBody = Like

// PostQuestionJSONRequestBody defines body for PostQuestion for application/json ContentType.
type PostQuestionJSONRequestBody = Question

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAnswerWithBody request with any body
	PostAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswer(ctx context.Context, body PostAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnswersByLike request
	GetAnswersByLike(ctx context.Context, params *GetAnswersByLikeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnswersByQuestionId request
	GetAnswersByQuestionId(ctx context.Context, params *GetAnswersByQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnswersByUserId request
	GetAnswersByUserId(ctx context.Context, params *GetAnswersByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLikeWithBody request with any body
	PostLikeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLike(ctx context.Context, body PostLikeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLikesByUserId request
	GetLikesByUserId(ctx context.Context, params *GetLikesByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQuestionWithBody request with any body
	PostQuestionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQuestion(ctx context.Context, body PostQuestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQuestionsByQuestionId request
	GetQuestionsByQuestionId(ctx context.Context, params *GetQuestionsByQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQuestionsByUserId request
	GetQuestionsByUserId(ctx context.Context, params *GetQuestionsByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserWithBody request with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswer(ctx context.Context, body PostAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnswersByLike(ctx context.Context, params *GetAnswersByLikeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnswersByLikeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnswersByQuestionId(ctx context.Context, params *GetAnswersByQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnswersByQuestionIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnswersByUserId(ctx context.Context, params *GetAnswersByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnswersByUserIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLikeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLikeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLike(ctx context.Context, body PostLikeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLikeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLikesByUserId(ctx context.Context, params *GetLikesByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLikesByUserIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuestionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuestionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuestion(ctx context.Context, body PostQuestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuestionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQuestionsByQuestionId(ctx context.Context, params *GetQuestionsByQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQuestionsByQuestionIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQuestionsByUserId(ctx context.Context, params *GetQuestionsByUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQuestionsByUserIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAnswerRequest calls the generic PostAnswer builder with application/json body
func NewPostAnswerRequest(server string, body PostAnswerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnswerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnswerRequestWithBody generates requests for PostAnswer with any type of body
func NewPostAnswerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnswersByLikeRequest generates requests for GetAnswersByLike
func NewGetAnswersByLikeRequest(server string, params *GetAnswersByLikeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answers/byLike")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topN", runtime.ParamLocationQuery, params.TopN); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnswersByQuestionIdRequest generates requests for GetAnswersByQuestionId
func NewGetAnswersByQuestionIdRequest(server string, params *GetAnswersByQuestionIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answers/byQuestionId")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "questionId", runtime.ParamLocationQuery, params.QuestionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnswersByUserIdRequest generates requests for GetAnswersByUserId
func NewGetAnswersByUserIdRequest(server string, params *GetAnswersByUserIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answers/byUserId")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLikeRequest calls the generic PostLike builder with application/json body
func NewPostLikeRequest(server string, body PostLikeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLikeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLikeRequestWithBody generates requests for PostLike with any type of body
func NewPostLikeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLikesByUserIdRequest generates requests for GetLikesByUserId
func NewGetLikesByUserIdRequest(server string, params *GetLikesByUserIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes/byUserId")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostQuestionRequest calls the generic PostQuestion builder with application/json body
func NewPostQuestionRequest(server string, body PostQuestionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQuestionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQuestionRequestWithBody generates requests for PostQuestion with any type of body
func NewPostQuestionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/questions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetQuestionsByQuestionIdRequest generates requests for GetQuestionsByQuestionId
func NewGetQuestionsByQuestionIdRequest(server string, params *GetQuestionsByQuestionIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/questions/byQuestionId")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "questionId", runtime.ParamLocationQuery, params.QuestionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQuestionsByUserIdRequest generates requests for GetQuestionsByUserId
func NewGetQuestionsByUserIdRequest(server string, params *GetQuestionsByUserIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/questions/byUserId")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAnswerWithBodyWithResponse request with any body
	PostAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerResponse, error)

	PostAnswerWithResponse(ctx context.Context, body PostAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerResponse, error)

	// GetAnswersByLikeWithResponse request
	GetAnswersByLikeWithResponse(ctx context.Context, params *GetAnswersByLikeParams, reqEditors ...RequestEditorFn) (*GetAnswersByLikeResponse, error)

	// GetAnswersByQuestionIdWithResponse request
	GetAnswersByQuestionIdWithResponse(ctx context.Context, params *GetAnswersByQuestionIdParams, reqEditors ...RequestEditorFn) (*GetAnswersByQuestionIdResponse, error)

	// GetAnswersByUserIdWithResponse request
	GetAnswersByUserIdWithResponse(ctx context.Context, params *GetAnswersByUserIdParams, reqEditors ...RequestEditorFn) (*GetAnswersByUserIdResponse, error)

	// PostLikeWithBodyWithResponse request with any body
	PostLikeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLikeResponse, error)

	PostLikeWithResponse(ctx context.Context, body PostLikeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLikeResponse, error)

	// GetLikesByUserIdWithResponse request
	GetLikesByUserIdWithResponse(ctx context.Context, params *GetLikesByUserIdParams, reqEditors ...RequestEditorFn) (*GetLikesByUserIdResponse, error)

	// PostQuestionWithBodyWithResponse request with any body
	PostQuestionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuestionResponse, error)

	PostQuestionWithResponse(ctx context.Context, body PostQuestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuestionResponse, error)

	// GetQuestionsByQuestionIdWithResponse request
	GetQuestionsByQuestionIdWithResponse(ctx context.Context, params *GetQuestionsByQuestionIdParams, reqEditors ...RequestEditorFn) (*GetQuestionsByQuestionIdResponse, error)

	// GetQuestionsByUserIdWithResponse request
	GetQuestionsByUserIdWithResponse(ctx context.Context, params *GetQuestionsByUserIdParams, reqEditors ...RequestEditorFn) (*GetQuestionsByUserIdResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PostUserWithBodyWithResponse request with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error)
}

type PostAnswerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAnswerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnswerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnswersByLikeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Answer
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAnswersByLikeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnswersByLikeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnswersByQuestionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Answer
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAnswersByQuestionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnswersByQuestionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnswersByUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Answer
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAnswersByUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnswersByUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLikeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostLikeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLikeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLikesByUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Like
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLikesByUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLikesByUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQuestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostQuestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQuestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQuestionsByQuestionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Question
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetQuestionsByQuestionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQuestionsByQuestionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQuestionsByUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Question
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetQuestionsByUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQuestionsByUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAnswerWithBodyWithResponse request with arbitrary body returning *PostAnswerResponse
func (c *ClientWithResponses) PostAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerResponse, error) {
	rsp, err := c.PostAnswerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerWithResponse(ctx context.Context, body PostAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerResponse, error) {
	rsp, err := c.PostAnswer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerResponse(rsp)
}

// GetAnswersByLikeWithResponse request returning *GetAnswersByLikeResponse
func (c *ClientWithResponses) GetAnswersByLikeWithResponse(ctx context.Context, params *GetAnswersByLikeParams, reqEditors ...RequestEditorFn) (*GetAnswersByLikeResponse, error) {
	rsp, err := c.GetAnswersByLike(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnswersByLikeResponse(rsp)
}

// GetAnswersByQuestionIdWithResponse request returning *GetAnswersByQuestionIdResponse
func (c *ClientWithResponses) GetAnswersByQuestionIdWithResponse(ctx context.Context, params *GetAnswersByQuestionIdParams, reqEditors ...RequestEditorFn) (*GetAnswersByQuestionIdResponse, error) {
	rsp, err := c.GetAnswersByQuestionId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnswersByQuestionIdResponse(rsp)
}

// GetAnswersByUserIdWithResponse request returning *GetAnswersByUserIdResponse
func (c *ClientWithResponses) GetAnswersByUserIdWithResponse(ctx context.Context, params *GetAnswersByUserIdParams, reqEditors ...RequestEditorFn) (*GetAnswersByUserIdResponse, error) {
	rsp, err := c.GetAnswersByUserId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnswersByUserIdResponse(rsp)
}

// PostLikeWithBodyWithResponse request with arbitrary body returning *PostLikeResponse
func (c *ClientWithResponses) PostLikeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLikeResponse, error) {
	rsp, err := c.PostLikeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLikeResponse(rsp)
}

func (c *ClientWithResponses) PostLikeWithResponse(ctx context.Context, body PostLikeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLikeResponse, error) {
	rsp, err := c.PostLike(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLikeResponse(rsp)
}

// GetLikesByUserIdWithResponse request returning *GetLikesByUserIdResponse
func (c *ClientWithResponses) GetLikesByUserIdWithResponse(ctx context.Context, params *GetLikesByUserIdParams, reqEditors ...RequestEditorFn) (*GetLikesByUserIdResponse, error) {
	rsp, err := c.GetLikesByUserId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLikesByUserIdResponse(rsp)
}

// PostQuestionWithBodyWithResponse request with arbitrary body returning *PostQuestionResponse
func (c *ClientWithResponses) PostQuestionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuestionResponse, error) {
	rsp, err := c.PostQuestionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuestionResponse(rsp)
}

func (c *ClientWithResponses) PostQuestionWithResponse(ctx context.Context, body PostQuestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuestionResponse, error) {
	rsp, err := c.PostQuestion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuestionResponse(rsp)
}

// GetQuestionsByQuestionIdWithResponse request returning *GetQuestionsByQuestionIdResponse
func (c *ClientWithResponses) GetQuestionsByQuestionIdWithResponse(ctx context.Context, params *GetQuestionsByQuestionIdParams, reqEditors ...RequestEditorFn) (*GetQuestionsByQuestionIdResponse, error) {
	rsp, err := c.GetQuestionsByQuestionId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQuestionsByQuestionIdResponse(rsp)
}

// GetQuestionsByUserIdWithResponse request returning *GetQuestionsByUserIdResponse
func (c *ClientWithResponses) GetQuestionsByUserIdWithResponse(ctx context.Context, params *GetQuestionsByUserIdParams, reqEditors ...RequestEditorFn) (*GetQuestionsByUserIdResponse, error) {
	rsp, err := c.GetQuestionsByUserId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQuestionsByUserIdResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// ParsePostAnswerResponse parses an HTTP response from a PostAnswerWithResponse call
func ParsePostAnswerResponse(rsp *http.Response) (*PostAnswerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnswerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAnswersByLikeResponse parses an HTTP response from a GetAnswersByLikeWithResponse call
func ParseGetAnswersByLikeResponse(rsp *http.Response) (*GetAnswersByLikeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnswersByLikeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Answer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAnswersByQuestionIdResponse parses an HTTP response from a GetAnswersByQuestionIdWithResponse call
func ParseGetAnswersByQuestionIdResponse(rsp *http.Response) (*GetAnswersByQuestionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnswersByQuestionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Answer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAnswersByUserIdResponse parses an HTTP response from a GetAnswersByUserIdWithResponse call
func ParseGetAnswersByUserIdResponse(rsp *http.Response) (*GetAnswersByUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnswersByUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Answer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLikeResponse parses an HTTP response from a PostLikeWithResponse call
func ParsePostLikeResponse(rsp *http.Response) (*PostLikeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLikeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLikesByUserIdResponse parses an HTTP response from a GetLikesByUserIdWithResponse call
func ParseGetLikesByUserIdResponse(rsp *http.Response) (*GetLikesByUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLikesByUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Like
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostQuestionResponse parses an HTTP response from a PostQuestionWithResponse call
func ParsePostQuestionResponse(rsp *http.Response) (*PostQuestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQuestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetQuestionsByQuestionIdResponse parses an HTTP response from a GetQuestionsByQuestionIdWithResponse call
func ParseGetQuestionsByQuestionIdResponse(rsp *http.Response) (*GetQuestionsByQuestionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQuestionsByQuestionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Question
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetQuestionsByUserIdResponse parses an HTTP response from a GetQuestionsByUserIdWithResponse call
func ParseGetQuestionsByUserIdResponse(rsp *http.Response) (*GetQuestionsByUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQuestionsByUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Question
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /answers)
	PostAnswer(ctx echo.Context) error

	// (GET /answers/byLike)
	GetAnswersByLike(ctx echo.Context, params GetAnswersByLikeParams) error

	// (GET /answers/byQuestionId)
	GetAnswersByQuestionId(ctx echo.Context, params GetAnswersByQuestionIdParams) error

	// (GET /answers/byUserId)
	GetAnswersByUserId(ctx echo.Context, params GetAnswersByUserIdParams) error

	// (POST /likes)
	PostLike(ctx echo.Context) error

	// (GET /likes/byUserId)
	GetLikesByUserId(ctx echo.Context, params GetLikesByUserIdParams) error

	// (POST /questions)
	PostQuestion(ctx echo.Context) error

	// (GET /questions/byQuestionId)
	GetQuestionsByQuestionId(ctx echo.Context, params GetQuestionsByQuestionIdParams) error

	// (GET /questions/byUserId)
	GetQuestionsByUserId(ctx echo.Context, params GetQuestionsByUserIdParams) error

	// (GET /users)
	GetUser(ctx echo.Context) error

	// (POST /users)
	PostUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAnswer converts echo context to params.
func (w *ServerInterfaceWrapper) PostAnswer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAnswer(ctx)
	return err
}

// GetAnswersByLike converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnswersByLike(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnswersByLikeParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// ------------- Required query parameter "topN" -------------

	err = runtime.BindQueryParameter("form", true, true, "topN", ctx.QueryParams(), &params.TopN)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter topN: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnswersByLike(ctx, params)
	return err
}

// GetAnswersByQuestionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnswersByQuestionId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnswersByQuestionIdParams
	// ------------- Required query parameter "questionId" -------------

	err = runtime.BindQueryParameter("form", true, true, "questionId", ctx.QueryParams(), &params.QuestionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnswersByQuestionId(ctx, params)
	return err
}

// GetAnswersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnswersByUserId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnswersByUserIdParams
	// ------------- Required query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, true, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnswersByUserId(ctx, params)
	return err
}

// PostLike converts echo context to params.
func (w *ServerInterfaceWrapper) PostLike(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLike(ctx)
	return err
}

// GetLikesByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLikesByUserId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLikesByUserIdParams
	// ------------- Required query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, true, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLikesByUserId(ctx, params)
	return err
}

// PostQuestion converts echo context to params.
func (w *ServerInterfaceWrapper) PostQuestion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostQuestion(ctx)
	return err
}

// GetQuestionsByQuestionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuestionsByQuestionId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestionsByQuestionIdParams
	// ------------- Required query parameter "questionId" -------------

	err = runtime.BindQueryParameter("form", true, true, "questionId", ctx.QueryParams(), &params.QuestionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter questionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuestionsByQuestionId(ctx, params)
	return err
}

// GetQuestionsByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuestionsByUserId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestionsByUserIdParams
	// ------------- Required query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, true, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuestionsByUserId(ctx, params)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/answers", wrapper.PostAnswer)
	router.GET(baseURL+"/answers/byLike", wrapper.GetAnswersByLike)
	router.GET(baseURL+"/answers/byQuestionId", wrapper.GetAnswersByQuestionId)
	router.GET(baseURL+"/answers/byUserId", wrapper.GetAnswersByUserId)
	router.POST(baseURL+"/likes", wrapper.PostLike)
	router.GET(baseURL+"/likes/byUserId", wrapper.GetLikesByUserId)
	router.POST(baseURL+"/questions", wrapper.PostQuestion)
	router.GET(baseURL+"/questions/byQuestionId", wrapper.GetQuestionsByQuestionId)
	router.GET(baseURL+"/questions/byUserId", wrapper.GetQuestionsByUserId)
	router.GET(baseURL+"/users", wrapper.GetUser)
	router.POST(baseURL+"/users", wrapper.PostUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwW7UMBD9FWQ4hu6K3nLbClRVINpF6qnqwZvMbt0mtms7oKjKgc0BfoAjdyoQF06V",
	"+Bv/CLKTeBM26QapLZD2tJYnHs+892bG2gsUsJgzClRJ5F8gGZxAjO1yQuU7EGbFBeMgFAG7j92+Sjkg",
	"H0klCF2gzCtNe2GrkciDZBaRoGacMRYBpsYakbPCfWkiVMEChDGdJyAVYbTVa2XsuFSRGKTCMTfWORMx",
	"VshHIVbw1JiQt34kkR0pZB4ScJ4QASHyj1bJuiONaGpxV8CgGghVxvUQj100bHYKgTLRPIc5TiL1Qggm",
	"3oDkjEpY5yQGKfEC2oNe8/mKnEEXrx04mmA7TH+PAQd7jYoGA2XUmzCe1gTWxCQQgBWEO+lkr122/6g2",
	"u3RYz6cm2+vhOZRtbYDiGFrT+mP2rKf1i833hM6Z9URUZGz7CyLILlAQWDHxaHJg0ngLQloK0HhrvLVt",
	"YmAcKOYE+WjbbnmIY3Vi4x4VYrFrzqQyvyYvXDGFDphUk6pgTcQg1Q4LUysIRhVQewhzHpHAHhudykIC",
	"Rfs0qycC5shHj0er/joqm+uodJ41EVEiAbtRFLkN8Nl4bH5CkIEgvBAa2n9pUgyLxnBjQbU2Ghti83ad",
	"f9D5J7281PlXnX/U77/r5RedX+r8p86/6eWVzj/r/IdeXpnTmecAH83SqvEsoAX2XShRlzvFh4Y0gWNQ",
	"lq2jC0TM/ecJiLRSjY84CMJC9DuQXi3rNRm2e1KMv+7jx02m7Lidrd50EAWx7CsWVx9YCJy2MfP/6mLa",
	"aJQb1TGtd7ceGml0w/46eaD3hug9dBNhI7WH1VDoQasbIA+U3hGl7pHePTjLzn0bY9O6vi9D00Ldq3YM",
	"LAOpnILh4dVNNYA21M509VC/jfpx7u9LDTnYez8xqq8G9shYMT/g2urVLGsED6FhDplYg7m8jkv7v8Rd",
	"oGwvGhjC3jVzyAF78zOogPI+zJ8s+xUAAP//RSiuAlwXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
